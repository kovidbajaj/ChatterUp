<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Chatter Up</title>
  <link rel="stylesheet" type="text/css" href="css/styles.css">
</head>
<body>
   <div class="chat-container">
    <div class="chat-header">
      <span id="greetMessage">ðŸ‘‹ Welcome <%=name%></span>
      <span class="typing-status" id="typing-status"></span>
    </div>

    <div class="chat-body" id="message-list">
      <!-- Messages to be added Dynamically -->
    </div>

    <div class="chat-input">
      <input type="text" placeholder="Enter your message..." id="message-input" />
      <button id="send-message">Send</button>
    </div>

    <div class="user-panel" id="user-panel">
      <strong>Connected Users</strong>
      <!-- Connected Users will be added Dynamically -->
    </div>
  </div>
 
  <audio id="notifySound" src="/audio/notification_ding.mp3" preload="auto"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    //Scroll Function
    function scrollToBottom(){
      messageList.scrollTop = messageList.scrollHeight;
    }

    //Retrieving username from the chat-header.
    const greetMsg = document.getElementById('greetMessage');
    const username = greetMsg.innerText.replace('ðŸ‘‹ Welcome ', '');

    //Getting the different elements by id.
    const userPanel = document.getElementById('user-panel');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-message');
    const messageList = document.getElementById('message-list');

    //Adding connected user's username to the userPanel
    const createUserCard = (username) => {
      const connectedUserDiv = document.createElement('div');
      connectedUserDiv.className = "user-card";
      const outerSpan = document.createElement('span');
      const innerSpan = document.createElement('span');
      innerSpan.className = "dot";
      outerSpan.appendChild(innerSpan);
      outerSpan.appendChild(document.createTextNode(username));
      connectedUserDiv.appendChild(outerSpan);
      userPanel.appendChild(connectedUserDiv);
    };

    createUserCard(username);

    //Send the username to the server to broadcast it and store it in db.
    socket.emit('connectedUser', username);

    //Broadcasting Username
    socket.on('broadcast_connectedUsers', createUserCard);

    //Loading previously connected users to newly joined users.
    socket.on('load_connectedUsers', (users) => {
      users.forEach(user => createUserCard(user.username));
    });

    //Displaying updated connected users to every user after a client disconnection.
    socket.on('updated_connectedUsers', (users) => {
      userPanel.innerHTML = '<strong>Connected Users</strong>';
      users.forEach(user => createUserCard(user.username));
    });

    
    sendButton.addEventListener('click', () => {
      //read the message and send it to the server
      const message = messageInput.value.trim();
      if (message) {
        const timestamp = new Date().toLocaleTimeString();
        socket.emit('new_message', { message, username, timestamp });

        //Displaying the message as well in the list.
        const messageElement = document.createElement('div');
        messageElement.className = "message user blue right";
        messageElement.innerHTML = `<strong>${username}</strong><p>${message}</p><span class="time">${timestamp}</span>`;
        messageList.appendChild(messageElement);
        scrollToBottom();
        messageInput.value = '';
      }
    });

    //Displaying broadcasted message from server to users.
    socket.on("broadcast_message", (data) => {
      const messageElement = document.createElement('div');
      messageElement.className = "message user green";
      messageElement.innerHTML = `<strong>${data.username}</strong><p>${data.message}</p><span class="time">${data.timestamp}</span>`;
      messageList.appendChild(messageElement);
      scrollToBottom();
      document.getElementById('notifySound').play(); //play the notification sound along with the message
    });

    //Load previous message to newly connected users.
    socket.on('load_messages', (messages) => {
      messages.forEach(message => {
        const messageElement = document.createElement('div');
        messageElement.className = "message user green";
        messageElement.innerHTML = `<strong>${message.username}</strong><p>${message.message}</p><span class="time">${message.timestamp}</span>`;
        messageList.appendChild(messageElement);
        scrollToBottom();
      });
    });

  //Typing 
  let typing = false;
  let timeout;

  function stopTyping() {
    typing = false;
    socket.emit('stopTyping', { username: username });
  }

  messageInput.addEventListener('keydown', () => {
    if (!typing) {
      typing = true;
      socket.emit('typing', { username: username });

      // Stop typing after 2 seconds of inactivity
      timeout = setTimeout(stopTyping, 2000);
    } else {
      // Reset timeout if still typing
      clearTimeout(timeout);
      timeout = setTimeout(stopTyping, 2000);
    }
  });

  socket.on('typing', (data) => {
    document.getElementById('typing-status').innerText = `${data.username} is typing...`;
  });

  socket.on('stopTyping', (data) => {
    document.getElementById('typing-status').innerText = '';
  });
  </script>
</body>
</html>
